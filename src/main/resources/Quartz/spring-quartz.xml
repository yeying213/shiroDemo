<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean  id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean" lazy-init="false">
        <!--beanName默认id名，通过该属性显示的指定Bean名称  对应任务的名称 -->
        <!--<property name="beanName" value=""/>-->
        <!-- 用户可以将Spring ApplicationContext的引用
        保存到JobDataMap里面，以便在Job的代码访问applicationContext
        jobDetail封装了MyJob定时任务，并且为Job对应的jobDataAsMap提供了
        一个size的数据，此外，指定applicationContextJobDataKey，
        JobDataMap持有ApplicationContext的引用
        这样MyJob运行的时候就可以通过JobDataMap访问到size和ApplicationContext了
        -->
        <!--<property name="applicationContextJobDataKey" value="applicationContext"/>-->
        <property name="jobDataAsMap">
            <map>
                <entry key="size" value="10"/>
            </map>
        </property>
        <property name="jobClass" value="org.shrio.Quartz.MyJob"/>
    </bean>
    <!-- 可以将一个Bean的业务方法封装成满足Quartz要求的Job
      targetMethod指定要执行的目标方法
      concurrent：指定最终封装的任务是否有状态。
      通过MethodInvokingJobDetailFactoryBean产生的JobDetail不能序列化持久化到数据库
      如果希望，那么只能创建正规的Quarz的Job实现类。
    -->
    <bean id="jobDetail1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          p:targetObject-ref="myAdvice"
          p:targetMethod="doJob"
          p:concurrent="false"
    />
    <bean id="myAdvice" class="org.shrio.Service.MyService"/>
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"
          p:jobDetail-ref="jobDetail1"
          p:startDelay="1000"
          p:repeatInterval="100"
          p:repeatCount="100">
        <property name="jobDataAsMap">
            <map>
                <entry key="count" value="10"/>
            </map>
        </property>
    </bean>
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="jobDetail"
          p:cronExpression="0/5 * * * * ?"/>
    <!--

     在实际的应用里面，我们并不总是在程序部署的时候就确定需要哪些任务，
     往往需要在运行期间根据业务数据动态的产生触发器和任务，用户完全可以在
     运行期间通过代码调用SheduleFactoryBean获取Shedule实例，然后动态的注册触发器任务
    -->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- 注册多个trigger-->
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger"/>
            </list>
        </property>
        <!-- 通过map类型设置SheduleContext数据
        保存着Shedule的上下文信息，Job和Trigger都可以进行访问
        -->
        <property name="schedulerContextAsMap">
            <map>
                <entry key="timeout" value="30"/>
            </map>
        </property>
        <!-- 显示的指定quartz的配置文件地址-->
        <property name="configLocation" value="classpath:Quartz/quartz.properties"/>
    </bean>
</beans>