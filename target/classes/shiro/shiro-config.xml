<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- web.xml中shiro的filter对应的bean -->
    <!-- Shiro 的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
        <property name="loginUrl" value="/login" />
        <!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
        <!--<property name="successUrl" value="/first"/>-->
        <!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
        <property name="unauthorizedUrl" value="/refuse.jsp" />
        <!--自定义filter配置-->
        <property name="filters">
            <map>
                <!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
                <entry key="authc" value-ref="formAuthenticationFilter" />
            </map>
        </property>
        <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 对静态资源设置匿名访问
                  一般而言，将/**的拦截配置在最下面部位
               欢迎页面 验证码之类
                #{rpe.resourceRoot}=anon
               /** = anon
               -->
                /resources_1.2.1/**=anon
                /error/**=anon
                <!-- 验证码进行放行-->
                /validatecode.jsp=anon
                <!-- 请求该地址 自动退出 清除session-->
                /logout=logout

                <!-- 商品的查询 需要商品查询权限
                 需要对那个拦截 就进行配置 不配置 ，默认 不进行拦截处理

                 1.在shiro里面 配置过滤器，需要将全部的url和权限对应起来配置，比较麻烦
                 不方便使用
                 2.每次授权都需要调用realm查询数据库，对系统性能具有很大的影响
                 可以使用shiro的缓存来解决这个问题
                 因此 下面 这种 配置 不建议使用 注解授权- 也就是 对类的某些
                 方法进行授权- 一般选择在controller里面选择
                 因为 servie里面 有些方法是公用的  原理  就是 基于aop的代理方式
                -->
                <!--/item/queryItem=perms[item:query]-->
                <!--/item/editItem=perms[item:edit]-->
                <!-- 对所有的url地址进行拦截-->
                /**= authc
                <!--/images/** = anon-->
                <!--/js/** = anon-->
                <!--/styles/** = anon-->
                <!--&lt;!&ndash; 验证码，可匿名访问 &ndash;&gt;-->
                <!--/validatecode.jsp = anon-->

                <!--&lt;!&ndash; 请求 logout.action地址，shiro去清除session&ndash;&gt;-->
                <!--/logout.action = logout-->
                <!--&lt;!&ndash;商品查询需要商品查询权限 ，取消url拦截配置，使用注解授权方式 &ndash;&gt;-->
                <!--&lt;!&ndash; /items/queryItems.action = perms[item:query]-->
                <!--/items/editItems.action = perms[item:edit] &ndash;&gt;-->
                <!--&lt;!&ndash; 配置记住我或认证通过可以访问的地址 &ndash;&gt;-->
                <!--/index.jsp  = user-->
                <!--/first.action = user-->
                <!--/welcome.jsp = user-->
                <!--&lt;!&ndash; /** = authc 所有url都必须认证通过才可以访问&ndash;&gt;-->
                <!--/** = authc-->
                <!--&lt;!&ndash; /** = anon所有url都可以匿名访问 &ndash;&gt;-->
            </value>
        </property>
    </bean>

    <!-- securityManager安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"/>
        <!-- 注入缓存管理器 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 注入session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!--&lt;!&ndash; 记住我 &ndash;&gt;-->
        <!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
    </bean>

    <!-- realm -->
    <bean id="customRealm" class="org.shrio.shiro.CustomRelamDb">
        <!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!--&lt;!&ndash; 凭证匹配器 &ndash;&gt;-->
    <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="1" />
    </bean>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro/shiro-ehcache.xml"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 600s 时间到后 自动清空-->
        <property name="globalSessionTimeout" value="600000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
         当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="ycyintang.session.id"/>
    </bean>
    <!-- 自定义form认证过虑器 -->
    <!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
    <bean id="formAuthenticationFilter"
          class="org.shrio.shiro.CustomFormAuthenticationFilter">
        <!-- 表单中账号的input名称 -->
        <property name="usernameParam" value="username" />
        <!-- 表单中密码的input名称  这里可以自定义进行改-->
        <property name="passwordParam" value="password" />
        <!--&lt;!&ndash; 记住我input的名称 &ndash;&gt;-->
        <!--<property name="rememberMeParam" value="rememberMe"/>-->
    </bean>

    <!--&lt;!&ndash; rememberMeManager管理器，写cookie，取出cookie生成用户信息 &ndash;&gt;-->
    <!--<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">-->
    <!--<property name="cookie" ref="rememberMeCookie" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 记住我cookie &ndash;&gt;-->
    <!--<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
    <!--&lt;!&ndash; rememberMe是cookie的名字 &ndash;&gt;-->
    <!--<constructor-arg value="rememberMe" />-->
    <!--&lt;!&ndash; 记住我cookie生效时间30天 &ndash;&gt;-->
    <!--<property name="maxAge" value="2592000" />-->
    <!--</bean>-->
</beans>